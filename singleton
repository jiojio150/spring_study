package hello.core.singleton;

import hello.core.AppConfig;
import hello.core.member.MemberService;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import static org.assertj.core.api.Assertions.assertThat;

public class SingletonTest {

    @Test
    @DisplayName("스프링 없는 순수한 DI 컨테이너")
    void pureContainer() {
        AppConfig appConfig = new AppConfig();

        //1.조회 : 호출할 때마다 객체를 생성
        MemberService memberService1 = appConfig.memberService();
        MemberService memberService2 = appConfig.memberService();

        //참조값이 다른 것을 확인 = 결과적으로 다른 객체가 생성됨.
        System.out.println("memberService1 = " + memberService1);
        System.out.println("memberService2 = " + memberService2);

        //memberService1 != memberService2
        Assertions.assertThat(memberService1).isNotSameAs(memberService2);

    }
}
// SingletonTest.java

package hello.core.singleton;

public class SingletonService {

    //자바가 뜰 때 static 영역에 자기 자신을 생성해서 instance에 참조를 넣어놓음.
    private static final SingletonService instance = new SingletonService();

    //이 메소드를 호출하면 항상 같은 인스턴스(1개)를 반환함.
    public static SingletonService getInstance(){
        return instance;
    }

    //외부에서 임의로 new로 객체를 생성할 수 없도록 private 생성자 사용
    private SingletonService(){
    }

    //임의로 작성한 로직
    public void logic(){
        System.out.println("싱글톤 객체 로직 호출");
    }

}
//SingletonService.java

@Test
    @DisplayName("싱글톤 패턴을 적용한 객체 사용")
    void singletonServiceTest(){
        //new SingletonService(); : 컴파일 오류
        SingletonService singletonService1 = SingletonService.getInstance();
        SingletonService singletonService2 = SingletonService.getInstance();

        System.out.println("singletonService1 = " + singletonService1);
        System.out.println("singletonService2 = " + singletonService2);

        assertThat(singletonService1).isSameAs(singletonService2);
    }
//SingletonTest.java

@Test
    @DisplayName("스프링 컨테이너와 싱글톤")
    void springContainer(){

        ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);

        //1.조회 : 호출할 때마다 객체를 생성
        MemberService memberService1 = ac.getBean("memberService", MemberService.class);
        MemberService memberService2 = ac.getBean("memberService", MemberService.class);

        //참조값이 다른 것을 확인 = 결과적으로 다른 객체가 생성됨.
        System.out.println("memberService1 = " + memberService1);
        System.out.println("memberService2 = " + memberService2);

        //memberService1 == memberService2
        Assertions.assertThat(memberService1).isSameAs(memberService2);
    }
//SingletonTest.java

package hello.core.singleton;

public class StatefulService {
    //stateful 해결법
    public int order(String name, int price){
        System.out.println("name = " + name + " price = " + price);
        return price;
    }
}
//StatefuleService.java

package hello.core.singleton;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Bean;

class StatefulServiceTest {

    @Test
    void statefulServiceSingleton(){
        ApplicationContext ac = new AnnotationConfigApplicationContext(TestConfig.class);

        StatefulService statefulService1 = ac.getBean(StatefulService.class);
        StatefulService statefulService2 = ac.getBean(StatefulService.class);

        //ThreadA : A 사용자가 10000원 주문
        int userA = statefulService1.order("userA", 10000);

        //ThreadB : B 사용자가 20000원 주문
        int userB = statefulService2.order("userB", 20000);

        Assertions.assertThat(statefulService1.order("userA", 10000)).isEqualTo(10000);
        Assertions.assertThat(statefulService2.order("userB", 20000)).isEqualTo(20000);
    }

    //테스트용 설정 정보
    static class TestConfig{

        @Bean
        public StatefulService statefulService(){
            return new StatefulService();
        }
    }
}
//StatefuleServiceTest.java

package hello.core.singleton;

import hello.core.AppConfig;
import hello.core.member.MemberRepository;
import hello.core.member.MemberServiceImpl;
import hello.core.order.OrderServiceImpl;
import org.junit.jupiter.api.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import static org.assertj.core.api.Assertions.assertThat;

public class ConfigurationSingletonTest {

    @Test
    void configurationTest(){
        ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);

        MemberServiceImpl memberService 
                = ac.getBean("memberService", MemberServiceImpl.class);
        OrderServiceImpl orderService 
                = ac.getBean("orderService", OrderServiceImpl.class);

        MemberRepository memberRepository 
                = ac.getBean("memberRepository", MemberRepository.class);

        MemberRepository memberRepository1 = memberService.getMemberRepository();
        MemberRepository memberRepository2 = orderService.getMemberRepository();

        System.out.println("MemberService -> memberRepository = " + memberRepository1);
        System.out.println("OrderService -> memberRepository = " + memberRepository2);
        System.out.println("memberRepository = " + memberRepository);

        assertThat(memberService.getMemberRepository()).isSameAs(memberRepository);
        assertThat(orderService.getMemberRepository()).isSameAs(memberRepository);
    }
}
//ConfigurationSingletonTest.java

